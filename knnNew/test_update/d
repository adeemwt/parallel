
#include "avl.h"
avl_tree_t *avl_create() {
	avl_tree_t *tree = NULL;

	if( ( tree = (avl_tree_t *)malloc( sizeof( avl_tree_t ) ) ) == NULL ) {
		return NULL;
	}

	tree->root = NULL;

	return tree;
}

/* Initialize a new node. */
avl_node_t *avl_create_node() {
	avl_node_t *node = NULL;
	if( ( node = (avl_node_t *)malloc( sizeof( avl_node_t ) ) ) == NULL ) {
		return NULL;
	}

	node->left = NULL;
	node->right = NULL;
	node->value =NULL;

	return node;	
}

/* Find the height of an AVL node recursively */
int avl_node_height( avl_node_t *node ) {
	int height_left = 0;
	int height_right = 0;

	if( node->left ) height_left = avl_node_height( node->left );
	if( node->right ) height_right = avl_node_height( node->right );

	return height_right > height_left ? ++height_right : ++height_left;
}

/* Find the balance of an AVL node */
int avl_balance_factor( avl_node_t *node ) {
	int bf = 0;

	if( node->left  ) bf += avl_node_height( node->left );
	if( node->right ) bf -= avl_node_height( node->right );

	return bf ;
}

/* Left Left Rotate */
avl_node_t *avl_rotate_leftleft( avl_node_t *node ) {
 	avl_node_t *a = node;
	avl_node_t *b = a->left;
	
	a->left = b->right;
	b->right = a;

	return( b );
}

/* Left Right Rotate */
avl_node_t *avl_rotate_leftright( avl_node_t *node ) {
	avl_node_t *a = node;
	avl_node_t *b = a->left;
	avl_node_t *c = b->right;
	
	a->left = c->right;
	b->right = c->left; 
	c->left = b;
	c->right = a;

	return( c );
}

/* Right Left Rotate */
avl_node_t *avl_rotate_rightleft( avl_node_t *node ) {
	avl_node_t *a = node;
	avl_node_t *b = a->right;
	avl_node_t *c = b->left;
	
	a->right = c->left;
	b->left = c->right; 
	c->right = b;
	c->left = a;

	return( c );
}

/* Right Right Rotate */
avl_node_t *avl_rotate_rightright( avl_node_t *node ) {
	avl_node_t *a = node;
	avl_node_t *b = a->right;
	
	a->right = b->left;
	b->left = a; 

	return( b );
}

/* Balance a given node */
avl_node_t *avl_balance_node( avl_node_t *node ) {
	avl_node_t *newroot = NULL;

	/* Balance our children, if they exist. */
	if( node->left )
		node->left  = avl_balance_node( node->left  );
	if( node->right ) 
		node->right = avl_balance_node( node->right );

	int bf = avl_balance_factor( node );

	if( bf >= 2 ) {
		/* Left Heavy */	

		if( avl_balance_factor( node->left ) <= -1 ) 
			newroot = avl_rotate_leftright( node );
		else 
			newroot = avl_rotate_leftleft( node );

	} else if( bf <= -2 ) {
		/* Right Heavy */

		if( avl_balance_factor( node->right ) >= 1 )
			newroot = avl_rotate_rightleft( node );
		else 
			newroot = avl_rotate_rightright( node );

	} else {
		/* This node is balanced -- no change. */

		newroot = node;
	}

	return( newroot );	
}

/* Balance a given tree */
void avl_balance( avl_tree_t *tree ) {

	avl_node_t *newroot = NULL;

	newroot = avl_balance_node( tree->root );

	if( newroot != tree->root )  {
		tree->root = newroot; 
	}
}

/* Insert a new node. */
void avl_insert( avl_tree_t *tree, point value ) {
	avl_node_t *node = NULL;
	avl_node_t *next = NULL;
	avl_node_t *last = NULL;

	/* Well, there must be a first case */ 	
	if( tree->root == NULL ) {
		node = avl_create_node();
		node->value= &value;
		tree->root = node;

	/* Okay.  We have a root already.  Where do we put this? */
	} else {
		next = tree->root;

		while( next != NULL ) {
			last = next;

			if( value.id < next->value->id ) {
				next = next->left;

			} else if( value.id > next->value->id ) {
				next = next->right;

			/* Have we already inserted this node? */
			} else if( value.id == next->value->id ) {
				/* This shouldn't happen. */	
			}
		}

		node = avl_create_node();
		node->value = &value;

		if( value.id < last->value->id ) last->left = node;
		if( value.id > last->value->id ) last->right = node;
		
	}

	avl_balance( tree );
}

/* Find the node containing a given value */
avl_node_t *avl_find( avl_tree_t *tree, point value ) {
	avl_node_t *current = tree->root;

	while( current && current->value->id != value.id) {
		if( value.id > current->value->id )
			current = current->right;
		else
			current = current->left;
	}

	return current;
}

/* Do a depth first traverse of a node. */
void avl_traverse_node_dfs( avl_node_t *node, int depth ) {
	int i = 0;

	if( node->left ) avl_traverse_node_dfs( node->left, depth + 2 );

	for( i = 0; i < depth; i++ ) putchar( ' ' );
	printf( "%d: %d\n", node->value, avl_balance_factor( node ) );

	if( node->right ) avl_traverse_node_dfs( node->right, depth + 2 );
}

/* Do a depth first traverse of a tree. */
void avl_traverse_dfs( avl_tree_t *tree ) {
	avl_traverse_node_dfs( tree->root, 0 );
}

__global__ void bitonic_sort_stepX(point*dev_values, int j, int k)
{
  unsigned int i, ixj;
  i = threadIdx.x + blockDim.x * blockIdx.x;
  ixj = i^j;
  if ((ixj)>i) {
    if ((i&k)==0) {
		if (dev_values[i].x >dev_values[ixj].x) {
        point temp = dev_values[i];
        dev_values[i] = dev_values[ixj];
        dev_values[ixj] = temp;
      }
    }
    if ((i&k)!=0) {
		if (dev_values[i].x<dev_values[ixj].x) {
        point temp = dev_values[i];
        dev_values[i] = dev_values[ixj];
        dev_values[ixj] = temp;
      }
    }
  }
}
__global__ void bitonic_sort_stepY(point*dev_values, int j, int k)
{
  unsigned int i, ixj;
  i = threadIdx.x + blockDim.x * blockIdx.x;
  ixj = i^j;
  if ((ixj)>i) {
    if ((i&k)==0) {
		if (dev_values[i].y >dev_values[ixj].y) {
        point temp = dev_values[i];
        dev_values[i] = dev_values[ixj];
        dev_values[ixj] = temp;
      }
    }
    if ((i&k)!=0) {

		if (dev_values[i].y<dev_values[ixj].y) {
        point temp = dev_values[i];
        dev_values[i] = dev_values[ixj];
        dev_values[ixj] = temp;
      }
    }
  }
}

void print_elapsed(clock_t start, clock_t stop)
{
  double elapsed = ((double) (stop - start)) / CLOCKS_PER_SEC;
  printf("Elapsed time: %.3fs\n", elapsed);
}
float random_float()
{
  return (float)rand()/(float)RAND_MAX;
}
int FindNearestPowerofn(int length){
	for(int i =0 ; i<20;i++){
		if(pow(2.0,i)>=length)
			return i;
	}
}

 void bitonic_sort(point *values,int XxY,int BLOCKS,int THREADS)
{
  point *dev_values;
  int L =BLOCKS*THREADS;
  size_t size = L * sizeof(point);

  cudaMalloc((void**) &dev_values, size);
  cudaMemcpy(dev_values, values, size, cudaMemcpyHostToDevice);

  dim3 blocks(BLOCKS,1);    /* Number of blocks   */
  dim3 threads(THREADS,1);  /* Number of threads  */

  int j, k;
  /* Major step */
  for (k = 2; k <= L; k <<= 1) {
	/* Minor step */
	for (j=k>>1; j>0; j=j>>1) {
		if(XxY==0)
	  bitonic_sort_stepX<<< blocks, threads >>>(dev_values, j, k);
		else
	  bitonic_sort_stepY<<< blocks, threads >>>(dev_values, j, k);
	}
  }
  cudaMemcpy(values, dev_values, size, cudaMemcpyDeviceToHost);
  cudaFree(dev_values);
}
 void print(point* arr,int length) {
	bool correct = true;
	bool correcy = true;
	for (int i = 0; i < length; i++){
		//printf("%d %.2f %.3f\n",arr[i].id,arr[i].x,arr[i].y);
		if(i+1<length)
		if(arr[i].x > arr[i+1].x)
			correct = false;
		if(i+1<length)
		if(arr[i].y > arr[i+1].y)
			correcy = false;
	}
	if(correct)
	printf("x is true");
	if(correcy)
	printf("y is true\n");
}
 void generateRandomIntArray(point *arr, int length, int max)
{

	srand((unsigned)time(NULL));
	for (int i = 0; i < length; i++)
	{
		arr[i].x= rand() % max;
		arr[i].y = rand() % max;
		arr[i].id = i;
	}

}
 void printResult(int** arr, int length,int k) {
	int j;
	for (int i = 0; i < length; i++){
		printf("%d -[",i+1);
		for(j=0 ; j < k -1;j++)
			printf("%d,",arr[i][j]);
		printf("%d]\n",arr[i][j]);
	}
}
 void Sort(int xOry,point* arr,int length) {
	int c, d;
	point swap;
	for (c = 0; c < (length- 1); c++)
	{
		for (d = 0; d < length - c - 1; d++)
		{
			if (xOry==1) {
			if (arr[d].x > arr[d + 1].x) /* For decreasing order use < */
			{
				swap = arr[d];
				arr[d] = arr[d + 1];
				arr[d + 1] = swap;
			}
			}
			else {
			if (arr[d].y > arr[d + 1].y) /* For decreasing order use < */
			{
				swap = arr[d];
				arr[d] = arr[d + 1];
				arr[d + 1] = swap;
			}
			}
		}
	}
}
 void calc(point current, point* sByx, point* sByy,  int length,int* res,int K) {
	int* pointers = new int[4];
	int initialxPos = findPointer(sByx, current, length);
	int initialyPos = findPointer(sByy, current, length);
	int resL = 0;
	pointers[0] = initialxPos;
	pointers[1] = initialxPos;
	pointers[2] = initialyPos;
	pointers[3] = initialyPos;
	int o = 0;		
	avl_tree_t *tree = NULL;
	printf("in here");
	while (resL<K) {
	tree = avl_create();
		moveAhead(current, sByx, sByy, length, pointers,K,tree,res,resL);
		o++;
	}printf("done, called move %d times\n",o);
}
 int calc_minDest(int* pointers, point* sByx, point* sByy,point cur) {
	double one =MAX(cur.x - sByx[pointers[0]].x, sByx[pointers[1]].x - cur.x);
	double two =MAX(cur.y - sByy[pointers[2]].y, sByy[pointers[3]].y - cur.y);
	return (MIN(one,two)== one? 0 : 1);
}

 void moveAhead(point current, point* sByx, point* sByy, int length, int* pointers,int k,avl_tree_t *tree,int* res,int&resL) {//OK
		(pointers[0]-1<=0 ? NULL :avl_insert(tree,sByx[pointers[0]--]));
		(pointers[1]+1>length ? NULL :avl_insert(tree,sByx[pointers[1]++]));
		(pointers[2]-1<=0 ? NULL :(avl_find(tree,sByy[pointers[2]])&&sByy[pointers[2]].id!=current.id&&resL+1<=k?res[resL++] =sByy[pointers[2]--].id:pointers[2]--));
		(pointers[3]+1>length ? NULL :(avl_find(tree,sByy[pointers[3]])&&sByy[pointers[3]].id!=current.id&&resL+1<=k)?res[resL++] =sByy[pointers[3]++].id:pointers[3]++);
		printf("the pointers + (%d,%d) (%d,%d)\n",pointers[0],pointers[1],pointers[2],pointers[3]);
 }

 void findCommon(point cur, point* sByx, point* sByy, int* pointers,int& resL,int* res,int K,int L) {
	int in = 0;	
	int tempL =0,tempSize=2*K;
	double one = MAX(cur.x - sByx[pointers[0]].x, sByx[pointers[1]].x - cur.x);
	double two = MAX(cur.y - sByy[pointers[2]].y, sByy[pointers[3]].y - cur.y);
	double rad = MIN(one, two);
	point* temp = (point*)malloc(sizeof(point)*2*K);
	if (pointers[0] == 0 && pointers[1]+1 == L || pointers[2] == 0 && pointers[3]+1 == L)
		rad = MAX(one, two);

	for (int i = pointers[0]; i <= pointers[1]; i++) {
		for (int j = pointers[2]; j <= pointers[3]; j++) {
			if (sByx[i].id == sByy[j].id&& sByx[i].id!=cur.id) {
			if (calc_dest(cur, sByx[i]) <= rad) {
				if(tempSize >tempL+1)
					temp[tempL++] = sByx[i];
				else{
					tempSize+=K;
					temp = (point*)realloc(temp, (tempSize+=K) * sizeof(point));
					temp[tempL++] = sByx[i];
					printf("inc. mem\n");
				}

			}
		}
		}
	}
	printf("here");
	if(tempL >=K-resL)
		innerSort(temp,tempL,cur);
	for(int i=0 ; i <tempL;i++){
		if(resL+1<=K)
		res[resL++]=temp[i].id;
	}
	
	printf("%d\n",resL);
	free(temp);
}
 double calc_dest(point a,point b) {
	return pow(pow(a.x - b.x, 2) + pow(a.y - b.y, 2),0.5);
}
 int  findPointer(point* arr, point p,int length) {
	for (int i = 0; i < length; i++) {
		if (arr[i].id == p.id)
			return i;
	}
}
 void innerSort(point* arr,int length,point cur){
	int c, d;
	point swap;
	for (c = 0; c < (length); c++)
	{
		for (d = 0; d < length - c - 1; d++)
		{
			
			if (calc_dest(arr[d],cur) > calc_dest(arr[d + 1],cur))
			{
				swap = arr[d];
				arr[d] = arr[d + 1];
				arr[d + 1] = swap;
			}
			
		}
	}
}
int** start(int start,int finish,int length,point * arr,int K) {
	int** res = new int*[length];
	arr = (point*)realloc(arr,sizeof(point)*pow(2.0,FindNearestPowerofn(length)));
	for(int i =length; i <pow(2.0,FindNearestPowerofn(length));i++){
		arr[i].x =  1000;
		arr[i].y =  1000;
		arr[i].id = i;
	}
	getchar();
	point* sByx = (point*)calloc(pow(2.0,FindNearestPowerofn(length)), sizeof(point));
	point* sByy = (point*)calloc(pow(2.0,FindNearestPowerofn(length)), sizeof(point));
	memcpy(sByx, arr, sizeof(point)*pow(2.0,FindNearestPowerofn(length)));
	memcpy(sByy, arr, sizeof(point)*pow(2.0,FindNearestPowerofn(length)));
	printf("the power found is + %d\n",FindNearestPowerofn(length));
	int blocks;
	blocks = pow(2.0,FindNearestPowerofn(length))/1024;
	int threads;
	threads=  1024;
	double time1 = clock();
	bitonic_sort(sByx,0,blocks,threads);
	bitonic_sort(sByy,1,blocks,threads);
	double time2 = clock();
	printf("\nsorting done , elapsed time : %.9f\n , block %d,threads%d",(time2-time1)/CLOCKS_PER_SEC,blocks,threads);
	printf("\nsbyx\n");
	print(sByx,length);	
	printf("\nsbyy \n................\n\n\n");
	print(sByy,length);
	printf("\nSorting done...\nInitiating KNN Calculation...",length);
	getchar();
	#pragma omp parallel
	{
		#pragma omp for
		for(int i = start; i < finish; i++)
		{
			res[i] =(int*)calloc(K,sizeof(int));
			calc(arr[i], sByx, sByy, length,res[i],K);
		if(i%1000==0)
			printf("finished + - %d\n",i);
		}
	}
	printf("Finished.");
	getchar();
	free(sByx);
	free(sByy);
	return res;
}
void FileIO(int**arr,int length,int K){ 
	FILE *out;
	out = fopen(Ofile,"w");
	if (out == NULL) {
	fprintf(stderr, "Can't open output file %s!\n",
          Ofile);
	return;
	}
	int j;
	for (int i = 0; i < length; i++){
		fprintf(out,"%d ",i+1);
		for(j=0 ; j < K -1;j++)
			fprintf(out,"%d ",arr[i][j]);
		fprintf(out,"%d\n",arr[i][j]);
	}
	  fprintf(out, "finished.");
	fclose(out);
}
point *FileIOIn(int& length,int& k){ 
	FILE *in;
	getchar();
	printf("inhere");
	point *arr;
	in = fopen(Ifile,"r+");
	if (in == NULL) {
	fprintf(stderr, "Can't open output file %s!\n",
          Ifile);
	arr = (point*)malloc(sizeof(point)*DEFAULT_L);
  	generateRandomIntArray(arr, DEFAULT_L, DEFAULT_M);
	in = fopen(Ifile,"w");
	fprintf(in,"%d ",DEFAULT_L);
	fprintf(in,"%d\n",DEFAULT_K);
	for(int i =0 ; i < DEFAULT_L;i++)
		fprintf(in,"%d %f %f\n",arr[i].id,arr[i].x,arr[i].y);
	length =DEFAULT_L;
	k = DEFAULT_K;
	fclose(in);
	return arr;
}
else{
fscanf(in,"%d",&length );
getchar();
fscanf(in,"%d",&k);
arr = (point*)calloc(length,sizeof(point));
printf("%d,%d\n",length,k);
int max=0;
for(int i =0 ; i < length ;i++)
{
	 fscanf(in,"%d %lf %lf",&arr[i].id,&arr[i].x,&arr[i].y);
	 if(max < arr[i].x)
		 max = arr[i].x;
}
fclose(in);
return arr;
}
}


